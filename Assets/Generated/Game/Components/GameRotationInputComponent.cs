//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameContext {

    public GameEntity rotationInputEntity { get { return GetGroup(GameMatcher.RotationInput).GetSingleEntity(); } }
    public RotationInputComponent rotationInput { get { return rotationInputEntity.rotationInput; } }
    public bool hasRotationInput { get { return rotationInputEntity != null; } }

    public GameEntity SetRotationInput(float newValue) {
        if (hasRotationInput) {
            throw new Entitas.EntitasException("Could not set RotationInput!\n" + this + " already has an entity with RotationInputComponent!",
                "You should check if the context already has a rotationInputEntity before setting it or use context.ReplaceRotationInput().");
        }
        var entity = CreateEntity();
        entity.AddRotationInput(newValue);
        return entity;
    }

    public void ReplaceRotationInput(float newValue) {
        var entity = rotationInputEntity;
        if (entity == null) {
            entity = SetRotationInput(newValue);
        } else {
            entity.ReplaceRotationInput(newValue);
        }
    }

    public void RemoveRotationInput() {
        rotationInputEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public RotationInputComponent rotationInput { get { return (RotationInputComponent)GetComponent(GameComponentsLookup.RotationInput); } }
    public bool hasRotationInput { get { return HasComponent(GameComponentsLookup.RotationInput); } }

    public void AddRotationInput(float newValue) {
        var index = GameComponentsLookup.RotationInput;
        var component = (RotationInputComponent)CreateComponent(index, typeof(RotationInputComponent));
        component.value = newValue;
        AddComponent(index, component);
    }

    public void ReplaceRotationInput(float newValue) {
        var index = GameComponentsLookup.RotationInput;
        var component = (RotationInputComponent)CreateComponent(index, typeof(RotationInputComponent));
        component.value = newValue;
        ReplaceComponent(index, component);
    }

    public void RemoveRotationInput() {
        RemoveComponent(GameComponentsLookup.RotationInput);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherRotationInput;

    public static Entitas.IMatcher<GameEntity> RotationInput {
        get {
            if (_matcherRotationInput == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.RotationInput);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherRotationInput = matcher;
            }

            return _matcherRotationInput;
        }
    }
}
